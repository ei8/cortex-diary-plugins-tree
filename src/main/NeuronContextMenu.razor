@using Blazorise
@using Microsoft.AspNetCore.Components.Web;

@if (this.IsVisible)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Select Action</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close" @onclick="() => this.SelectOption(ContextMenuOption.New)">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current forecast -->
                <div class="modal-body">
                    <table style="width: 100%; height: 100%">
                        <tr>
                            <td style="vertical-align: bottom; padding-left: 5px; padding-bottom: 3px;">
                                <button @onclick="() => this.SelectOption(ContextMenuOption.Edit)">Edit</button>
                            </td>
                            <td style="vertical-align: bottom; padding-left: 5px; padding-bottom: 3px;">
                                <button @onclick="() => this.SelectOption(ContextMenuOption.Delete)">Delete</button>
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align: bottom; padding-left: 5px; padding-bottom: 3px;">
                                <button @onclick="() => this.SelectOption(ContextMenuOption.AddRelative)">Add New Relative</button>
                            </td>
                            <td style="vertical-align: bottom; padding-left: 5px; padding-bottom: 3px;">
                                <button @onclick="() => this.SelectOption(ContextMenuOption.ExpandUntilPostsynapticExternalReferences)">Expand Until Postsynaptic External References</button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private bool isVisible;
    [Parameter]
    public bool IsVisible
    {
        get => this.isVisible;
        set
        {
            if (this.isVisible != value)
            {
                this.isVisible = value;
                this.IsVisibleChanged.InvokeAsync(this.isVisible);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private void SelectOption(ContextMenuOption option)
    {
        this.IsVisible = false;
        this.SelectedOption = ContextMenuOption.NotSet;
        this.SelectedOption = option;
    }

    private ContextMenuOption selectedOption { get; set; }
    [Parameter]
    public ContextMenuOption SelectedOption
    {
        get => this.selectedOption;
        set
        {
            if (this.selectedOption != value)
            {
                this.selectedOption = value;
                this.SelectedOptionChanged.InvokeAsync(this.selectedOption);
            }
        }
    }

    [Parameter]
    public EventCallback<ContextMenuOption> SelectedOptionChanged { get; set; }
}
